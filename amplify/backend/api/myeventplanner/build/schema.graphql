
type Availability @aws_cognito_user_pools @aws_iam {
  datetime_start: AWSDateTime
  datetime_end: AWSDateTime
}

type Room @aws_cognito_user_pools @aws_iam {
  id: ID!
  name: String!
  capacity: Int!
  availability: [Availability]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Ticket @aws_cognito_user_pools @aws_iam {
  student_id: String!
}

type Event @aws_cognito_user_pools @aws_iam {
  id: ID!
  name: String!
  description: String
  event_owner: String!
  room_id: String!
  image_file_name: String
  event_datetime_start: AWSDateTime!
  event_datetime_end: AWSDateTime!
  event_duration: Int!
  total_tickets: Int!
  tickets: [Ticket!]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type Query {
  findSuitableRooms(max_tickets: Int, start_datetime: AWSDateTime, end_datetime: AWSDateTime): String
  getRoom(id: ID!): Room @aws_cognito_user_pools @aws_iam
  listRooms(filter: ModelRoomFilterInput, limit: Int, nextToken: String): ModelRoomConnection @aws_cognito_user_pools @aws_iam
  getEvent(id: ID!): Event @aws_cognito_user_pools @aws_iam
  listEvents(filter: ModelEventFilterInput, limit: Int, nextToken: String): ModelEventConnection @aws_cognito_user_pools @aws_iam
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input AvailabilityInput {
  datetime_start: AWSDateTime
  datetime_end: AWSDateTime
}

type ModelRoomConnection @aws_cognito_user_pools @aws_iam {
  items: [Room]!
  nextToken: String
}

input ModelRoomFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  capacity: ModelIntInput
  and: [ModelRoomFilterInput]
  or: [ModelRoomFilterInput]
  not: ModelRoomFilterInput
}

input ModelRoomConditionInput {
  name: ModelStringInput
  capacity: ModelIntInput
  and: [ModelRoomConditionInput]
  or: [ModelRoomConditionInput]
  not: ModelRoomConditionInput
}

input CreateRoomInput {
  id: ID
  name: String!
  capacity: Int!
  availability: [AvailabilityInput]
}

input UpdateRoomInput {
  id: ID!
  name: String
  capacity: Int
  availability: [AvailabilityInput]
}

input DeleteRoomInput {
  id: ID!
}

type Mutation {
  createRoom(input: CreateRoomInput!, condition: ModelRoomConditionInput): Room @aws_cognito_user_pools @aws_iam
  updateRoom(input: UpdateRoomInput!, condition: ModelRoomConditionInput): Room @aws_cognito_user_pools @aws_iam
  deleteRoom(input: DeleteRoomInput!, condition: ModelRoomConditionInput): Room @aws_cognito_user_pools @aws_iam
  createEvent(input: CreateEventInput!, condition: ModelEventConditionInput): Event @aws_cognito_user_pools @aws_iam
  updateEvent(input: UpdateEventInput!, condition: ModelEventConditionInput): Event @aws_cognito_user_pools @aws_iam
  deleteEvent(input: DeleteEventInput!, condition: ModelEventConditionInput): Event @aws_cognito_user_pools @aws_iam
}

input ModelSubscriptionRoomFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  capacity: ModelSubscriptionIntInput
  and: [ModelSubscriptionRoomFilterInput]
  or: [ModelSubscriptionRoomFilterInput]
}

type Subscription {
  onCreateRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["createRoom"]) @aws_cognito_user_pools @aws_iam
  onUpdateRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["updateRoom"]) @aws_cognito_user_pools @aws_iam
  onDeleteRoom(filter: ModelSubscriptionRoomFilterInput): Room @aws_subscribe(mutations: ["deleteRoom"]) @aws_cognito_user_pools @aws_iam
  onCreateEvent(filter: ModelSubscriptionEventFilterInput, owner: String): Event @aws_subscribe(mutations: ["createEvent"]) @aws_cognito_user_pools @aws_iam
  onUpdateEvent(filter: ModelSubscriptionEventFilterInput, owner: String): Event @aws_subscribe(mutations: ["updateEvent"]) @aws_cognito_user_pools @aws_iam
  onDeleteEvent(filter: ModelSubscriptionEventFilterInput, owner: String): Event @aws_subscribe(mutations: ["deleteEvent"]) @aws_cognito_user_pools @aws_iam
}

input TicketInput {
  student_id: String!
}

type ModelEventConnection @aws_cognito_user_pools @aws_iam {
  items: [Event]!
  nextToken: String
}

input ModelEventFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  event_owner: ModelStringInput
  room_id: ModelStringInput
  image_file_name: ModelStringInput
  event_datetime_start: ModelStringInput
  event_datetime_end: ModelStringInput
  event_duration: ModelIntInput
  total_tickets: ModelIntInput
  and: [ModelEventFilterInput]
  or: [ModelEventFilterInput]
  not: ModelEventFilterInput
}

input ModelEventConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  event_owner: ModelStringInput
  room_id: ModelStringInput
  image_file_name: ModelStringInput
  event_datetime_start: ModelStringInput
  event_datetime_end: ModelStringInput
  event_duration: ModelIntInput
  total_tickets: ModelIntInput
  and: [ModelEventConditionInput]
  or: [ModelEventConditionInput]
  not: ModelEventConditionInput
}

input CreateEventInput {
  id: ID
  name: String!
  description: String
  event_owner: String!
  room_id: String!
  image_file_name: String
  event_datetime_start: AWSDateTime!
  event_datetime_end: AWSDateTime!
  event_duration: Int!
  total_tickets: Int!
  tickets: [TicketInput!]
}

input UpdateEventInput {
  id: ID!
  name: String
  description: String
  event_owner: String
  room_id: String
  image_file_name: String
  event_datetime_start: AWSDateTime
  event_datetime_end: AWSDateTime
  event_duration: Int
  total_tickets: Int
  tickets: [TicketInput!]
}

input DeleteEventInput {
  id: ID!
}

input ModelSubscriptionEventFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  event_owner: ModelSubscriptionStringInput
  room_id: ModelSubscriptionStringInput
  image_file_name: ModelSubscriptionStringInput
  event_datetime_start: ModelSubscriptionStringInput
  event_datetime_end: ModelSubscriptionStringInput
  event_duration: ModelSubscriptionIntInput
  total_tickets: ModelSubscriptionIntInput
  and: [ModelSubscriptionEventFilterInput]
  or: [ModelSubscriptionEventFilterInput]
}

